import cv2
import numpy
from PIL import Image
import os
import xlwt
import pandas as pd
import numpy as np
import math

def template_match():
    #读取目标图片
    target = cv2.imread("target.bmp")
    #读取模板图片
    template = cv2.imread("new.bmp")
    #获得模板图片的高宽尺寸
    theight, twidth = template.shape[:2]
    #执行模板匹配，采用的匹配方式cv2.TM_SQDIFF_NORMED
    result = cv2.matchTemplate(target,template,cv2.TM_SQDIFF_NORMED)
    #归一化处理
    #cv2.normalize( result, result, 0, 1, cv2.NORM_MINMAX, -1 )
    #寻找矩阵（一维数组当做向量，用Mat定义）中的最大值和最小值的匹配结果及其位置
    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
    #绘制矩形边框，将匹配区域标注出来
    #min_loc：矩形定点
    #(min_loc[0]+twidth,min_loc[1]+theight)：矩形的宽高
    #(0,0,225)：矩形的边框颜色；2：矩形边框宽度
    cv2.rectangle(target,min_loc,(min_loc[0]+twidth,min_loc[1]+theight),(0,0,225),1)
    #匹配值转换为字符串
    #对于cv2.TM_SQDIFF及cv2.TM_SQDIFF_NORMED方法min_val越趋近与0匹配度越好，匹配位置取min_loc
    #对于其他方法max_val越趋近于1匹配度越好，匹配位置取max_loc
    strmin_val = str(min_val)
    #初始化位置参数
    temp_loc = min_loc
    other_loc = min_loc
    numOfloc = 1
    #第一次筛选----规定匹配阈值，将满足阈值的从result中提取出来
    #对于cv2.TM_SQDIFF及cv2.TM_SQDIFF_NORMED方法设置匹配阈值为0.01
    threshold = 0.081
    loc = numpy.where(result<threshold)
    a = []
    #遍历提取出来的位置
    for other_loc in zip(*loc[::-1]):
        #第二次筛选----将位置偏移小于5个像素的结果舍去
        if (temp_loc[0]+5<other_loc[0])or(temp_loc[1]+5<other_loc[1]):
            numOfloc = numOfloc + 1
            temp_loc = other_loc
            cv2.rectangle(target,other_loc,(other_loc[0]+twidth,other_loc[1]+theight),(0,0,255),2)
            bottomright = (other_loc[0]+twidth,other_loc[1]+theight)
            a.append(str(other_loc)+'.'+str(bottomright))

    with open('C:/Users/JC/Desktop/coordinates.txt', 'w') as f:
        for coordinate in a:
            f.write(coordinate)
            f.write('\n')
    str_numOfloc = str(numOfloc)
    #显示结果,并将匹配值显示在标题栏上
    strText = "MatchResult----MatchingValue="+strmin_val+"----NumberOfPosition="+str_numOfloc
    cv2.imwrite('C:/Users/JC/Desktop/module/output.bmp',target)
    cv2.imshow(strText,target)
    cv2.waitKey()
    cv2.destroyAllWindows()

def segmentation():
    im = Image.open('target.bmp')
    filename = 'C:/Users/JC/Desktop/coordinates.txt'
    file = open(filename)
    data = file.readlines()
    i = 0
    for line in data:
        i = i+1
        x = line.split('(',1)[1].split(',',1)[0]
        y = line.split(',',1)[1].split(')',1)[0]
        x1 = line.split('.',1)[1].split('(',1)[1].split(',',1)[0]
        y1 = line.split('.',1)[1].split('(',1)[1].split(',',1)[1].split(')',1)[0]
        x = int(x)
        y = int(y)
        x1 = int(x1)
        y1 = int(y1)
        region = im.crop((x, y, x1, y1))
        region.save('C:/Users/JC/Desktop/modules/%d.bmp'%(i))

def definition_evaluation():
    a = []
    file_pathname = 'C:/Users/JC/Desktop/modules'
    f = xlwt.Workbook()
    sheet1 = f.add_sheet(u'sheet1', cell_overwrite_ok=True)
    sheet1.write(0, 0, 'image')
    sheet1.write(0, 1, 'definition')
    i = 1
    for filename in os.listdir(file_pathname):
        img = cv2.imread(file_pathname + '/' + filename)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        shape = np.shape(img)
        out = 0
        for x in range(0, shape[0] - 1):
            for y in range(0, shape[1] - 1):
                out += ((int(img[x + 1, y]) - int(img[x, y])) ** 2) * ((int(img[x, y + 1] - int(img[x, y]))) ** 2)
        a.append(out)
        sheet1.write(i, 0, filename)
        sheet1.write(i, 1, out)
        i = i + 1
    f.save('C:/Users/JC/Desktop/listin/2.xls')

def get_newpix():
    j = 0
    i = 0
    a = []
    f = xlwt.Workbook()
    sheet1 = f.add_sheet(u'sheet1', cell_overwrite_ok=True)  # 创建sheet
    for filename in os.listdir('C:/Users/JC/Desktop/TEST'):
        im = Image.open('C:/Users/JC/Desktop/TEST/' + filename)
        for y in range(im.size[1]):
            for x in range(im.size[0]):
                pix = im.getpixel((x, y))
                sheet1.write(i, j, pix)
                i += 1
        i = 0
        j = j + 1
    f.save('C:/Users/JC/Desktop/listin/1.xls')  # 保存文件

def get_new():
    df = pd.read_excel("C:/Users/JC/Desktop/listin/1.xls", usecols=[10], header=None,
                       names=None)  # 读取项目名称列,不要列名
    df_li = df.values.tolist()
    result = []
    for s_li in df_li:
        s_li[0] = math.floor(s_li[0])
        result.append(s_li[0])
    count = 0
    im = Image.open('33.bmp')
    for y in range(im.size[1]):
        for x in range(im.size[0]):
            im.putpixel((x, y), result[count])
            count += 1
    im.save('new.bmp')
    im.show()

if __name__ == '__main__':
    template_match()
